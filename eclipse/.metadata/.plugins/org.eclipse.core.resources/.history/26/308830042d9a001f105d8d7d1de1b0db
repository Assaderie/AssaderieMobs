package fr.assaderie.mobs.models;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.util.MathHelper;

public class CustomZombieChargeurModel extends ModelBase {
    
	 // Déclaration des parties du modèle
    public ModelRenderer head;
    public ModelRenderer torso;
    public ModelRenderer upperTorso;
    public ModelRenderer abdomen;
    public ModelRenderer rightArm;
    public ModelRenderer leftArm;
    public ModelRenderer rightThigh;
    public ModelRenderer leftThigh;
    public ModelRenderer rightLeg;
    public ModelRenderer leftLeg;
    public ModelRenderer tail;
    public ModelRenderer rightEar;
    public ModelRenderer leftEar;

    public boolean hunched; // Indique si le loup-garou est accroupi

    public MoCModelWerewolf() {
        // Initialisation de la tête et des oreilles
        this.head = new ModelRenderer(this, 0, 0);
        this.head.addBox(-0.5F, -8.5F, -8.0F, 3, 3, 4, 1.6F);
        this.head.setRotationPoint(0.0F, 2.0F, -1.0F);

        this.rightEar = new ModelRenderer(this, 15, 0);
        this.rightEar.addBox(-0.5F, -8.5F, -8.0F, 2, 4, 1, 0.0F);
        this.rightEar.setRotationPoint(3.5F, -4.0F, 3.5F);
        this.rightEar.rotateAngleX = -0.7853981F;
        this.rightEar.rotateAngleY = -0.5235988F;

        this.leftEar = new ModelRenderer(this, 15, 0);
        this.leftEar.addBox(-0.5F, -8.5F, -8.0F, 2, 4, 1, 0.0F);
        this.leftEar.setRotationPoint(-2.5F, -4.5F, 3.5F);
        this.leftEar.mirror = true;
        this.leftEar.rotateAngleX = 0.7853981F;
        this.leftEar.rotateAngleY = -0.5235988F;

        // Initialisation du torse et de l'abdomen
        this.torso = new ModelRenderer(this, 0, 7);
        this.torso.addBox(-1.5F, -8.0F, -3.5F, 5, 4, 5, 2.4F);
        this.torso.setRotationPoint(0.0F, 2.0F, 0.0F);
        this.torso.rotateAngleX = 1.047198F;

        this.upperTorso = new ModelRenderer(this, 20, 7);
        this.upperTorso.addBox(-1.5F, -8.0F, -3.5F, 5, 4, 5, 2.4F);
        this.upperTorso.setRotationPoint(0.0F, 3.5F, 12.0F);
        this.upperTorso.rotateAngleX = 0.6108652F;

        this.abdomen = new ModelRenderer(this, 0, 16);
        this.abdomen.addBox(-1.0F, 2.5F, 6.0F, 4, 5, 4, 2.4F);
        this.abdomen.setRotationPoint(0.0F, 2.0F, 0.0F);
        this.abdomen.rotateAngleX = 0.4363323F;

        // Initialisation des bras
        this.rightArm = new ModelRenderer(this, 48, 0);
        this.rightArm.addBox(-8.0F, 0.0F, 0.0F, 4, 16, 4, 0.0F);
        this.rightArm.setRotationPoint(0.0F, -6.0F, 0.0F);

        this.leftArm = new ModelRenderer(this, 48, 0);
        this.leftArm.addBox(6.0F, 0.0F, 0.0F, 4, 16, 4, 0.0F);
        this.leftArm.setRotationPoint(0.0F, -6.0F, 0.0F);
        this.leftArm.mirror = true;

        // Initialisation des cuisses et jambes
        this.rightThigh = new ModelRenderer(this, 32, 20);
        this.rightThigh.addBox(0.0F, 0.0F, 0.0F, 4, 8, 4, 0.0F);
        this.rightThigh.setRotationPoint(-3.5F, 8.0F, 9.0F);
        this.rightThigh.rotateAngleX = -0.7853981F;

        this.leftThigh = new ModelRenderer(this, 32, 20);
        this.leftThigh.addBox(0.0F, 0.0F, 0.0F, 4, 8, 4, 0.0F);
        this.leftThigh.setRotationPoint(1.5F, 8.0F, 9.0F);
        this.leftThigh.mirror = true;
        this.leftThigh.rotateAngleX = -0.7853981F;

        this.rightLeg = new ModelRenderer(this, 48, 20);
        this.rightLeg.addBox(2.0F, 8.0F, 0.0F, 4, 8, 4, 0.0F);
        this.rightLeg.setRotationPoint(-5.5F, 6.0F, -3.0F);

        this.leftLeg = new ModelRenderer(this, 48, 20);
        this.leftLeg.addBox(2.0F, 8.0F, 0.0F, 4, 8, 4, 0.0F);
        this.leftLeg.setRotationPoint(-0.5F, 6.0F, -3.0F);
        this.leftLeg.mirror = true;

        // Initialisation de la queue
        this.tail = new ModelRenderer(this, 9, 22);
        this.tail.addBox(0.0F, -2.0F, 16.0F, 2, 2, 8, 1.0F);
        this.tail.setRotationPoint(0.0F, 2.0F, 0.0F);
    }

    @Override
    public void render(Entity entity, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scale) {
        setRotationAngles(limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scale);
        head.render(scale);
        rightEar.render(scale);
        leftEar.render(scale);
        torso.render(scale);
        upperTorso.render(scale);
        abdomen.render(scale);
        rightArm.render(scale);
        leftArm.render(scale);
        rightThigh.render(scale);
        leftThigh.render(scale);
        rightLeg.render(scale);
        leftLeg.render(scale);
        tail.render(scale);
    }

    @Override
    public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scale, Entity par7Entity) {
        // Mouvement de la tête et des oreilles
        head.rotateAngleY = netHeadYaw / (180F / (float) Math.PI) / 2.0F;
        head.rotateAngleX = headPitch / (180F / (float) Math.PI);

        // Position des oreilles
        rightEar.rotateAngleY = head.rotateAngleY;
        rightEar.rotateAngleX = -0.5235988F - head.rotateAngleY / 4.0F;
        rightEar.rotationPointZ = 3.5F - head.rotateAngleY * 2.0F;
        leftEar.rotateAngleY = head.rotateAngleY;
        leftEar.rotateAngleX = -0.5235988F + head.rotateAngleY / 4.0F;
        leftEar.rotationPointZ = -2.5F - head.rotateAngleY * 2.0F;

        // Animation des bras
        rightArm.rotateAngleX = MathHelper.cos(limbSwing * 0.6662F + (float) Math.PI) * 2.0F * limbSwingAmount * 0.5F;
        leftArm.rotateAngleX = MathHelper.cos(limbSwing * 0.6662F) * 2.0F * limbSwingAmount * 0.5F;
        rightArm.rotateAngleZ = 0.0F;
        leftArm.rotateAngleZ = 0.0F;

        // Animation des jambes et des cuisses
        rightThigh.rotateAngleX = -0.7853981F + MathHelper.cos(limbSwing * 0.6662F) * 1.4F * limbSwingAmount / 3.0F;
        leftThigh.rotateAngleX = -0.7853981F + MathHelper.cos(limbSwing * 0.6662F + (float) Math.PI) * 1.4F * limbSwingAmount / 3.0F;

        // Ajustement pour la posture "hunched"
        if (hunched) {
            tail.rotateAngleX = 0.261799F;
            tail.rotationPointY = 10.0F;
            abdomen.rotateAngleX = 1.308997F;
            abdomen.rotationPointY = 13.0F;
            torso.rotateAngleX = 1.919862F;
            torso.rotationPointY = 4.0F;
            head.rotationPointY = 16.0F;
        } else {
            tail.rotateAngleX = -0.4363323F;
            tail.rotationPointY = 1.0F;
            abdomen.rotateAngleX = 0.4363323F;
            abdomen.rotationPointY = 2.0F;
            torso.rotateAngleX = 1.047198F;
            torso.rotationPointY = -3.0F;
            head.rotationPointY = -0.5F;
        }

        // Balancement des bras
        rightArm.rotateAngleZ += MathHelper.cos(ageInTicks * 0.09F) * 0.05F + 0.05F;
        leftArm.rotateAngleZ -= MathHelper.cos(ageInTicks * 0.09F) * 0.05F + 0.05F;
    }
}
