package fr.assaderie.mobs.models;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.util.MathHelper;

public class CustomZombieChargeurModel extends ModelBase {

    // Tête et composants du visage
    private final ModelRenderer head;
    private final ModelRenderer nose;
    private final ModelRenderer snout;
    private final ModelRenderer upperTeeth;
    private final ModelRenderer lowerTeeth;
    private final ModelRenderer mouth;
    private final ModelRenderer leftEar;
    private final ModelRenderer rightEar;

    // Cou, torse et abdomen
    private final ModelRenderer neck;
    private final ModelRenderer neckSegment2;
    private final ModelRenderer leftSideburn;
    private final ModelRenderer rightSideburn;
    private final ModelRenderer chest;
    private final ModelRenderer abdomen;

    // Queue segments
    private final ModelRenderer tailSegmentA;
    private final ModelRenderer tailSegmentB;
    private final ModelRenderer tailSegmentC;
    private final ModelRenderer tailSegmentD;

    // Jambes
    private final ModelRenderer rightUpperLeg;
    private final ModelRenderer rightLowerLeg;
    private final ModelRenderer rightFoot;
    private final ModelRenderer leftUpperLeg;
    private final ModelRenderer leftLowerLeg;
    private final ModelRenderer leftFoot;

    // Bras
    private final ModelRenderer rightUpperArm;
    private final ModelRenderer rightLowerArm;
    private final ModelRenderer rightHand;
    private final ModelRenderer leftUpperArm;
    private final ModelRenderer leftLowerArm;
    private final ModelRenderer leftHand;

    // Doigts
    private final ModelRenderer[] rightFingers = new ModelRenderer[5];
    private final ModelRenderer[] leftFingers = new ModelRenderer[5];

    // État de posture
    public boolean isHunched;

    // Constructeur du modèle
    public CustomZombieChargeurModel() {
        this.textureWidth = 64;
        this.textureHeight = 128;

        // Initialisation de la tête
        head = new ModelRenderer(this, 0, 0);
        head.addBox(-4.0F, -3.0F, -6.0F, 8, 8, 6);
        head.setRotationPoint(0.0F, -8.0F, -6.0F);

        nose = new ModelRenderer(this, 44, 33);
        nose.addBox(-1.5F, -1.7F, -12.3F, 3, 2, 7);
        nose.setRotationPoint(0.0F, -8.0F, -6.0F);

        snout = new ModelRenderer(this, 0, 25);
        snout.addBox(-2.0F, 2.0F, -12.0F, 4, 2, 6);
        snout.setRotationPoint(0.0F, -8.0F, -6.0F);

        upperTeeth = new ModelRenderer(this, 46, 18);
        upperTeeth.addBox(-2.0F, 4.01F, -12.0F, 4, 2, 5);
        upperTeeth.setRotationPoint(0.0F, -8.0F, -6.0F);

        lowerTeeth = new ModelRenderer(this, 20, 109);
        lowerTeeth.addBox(-1.5F, -12.5F, 2.01F, 3, 5, 2);
        lowerTeeth.setRotationPoint(0.0F, -8.0F, -6.0F);

        mouth = new ModelRenderer(this, 42, 69);
        mouth.addBox(-1.5F, -12.5F, 0.0F, 3, 9, 2);
        mouth.setRotationPoint(0.0F, -8.0F, -6.0F);

        leftEar = new ModelRenderer(this, 13, 14);
        leftEar.addBox(0.5F, -7.5F, -1.0F, 3, 5, 1);
        leftEar.setRotationPoint(0.0F, -8.0F, -6.0F);

        rightEar = new ModelRenderer(this, 22, 0);
        rightEar.addBox(-3.5F, -7.5F, -1.0F, 3, 5, 1);
        rightEar.setRotationPoint(0.0F, -8.0F, -6.0F);

        // Cou, torse et abdomen
        neck = new ModelRenderer(this, 28, 0);
        neck.addBox(-3.5F, -3.0F, -7.0F, 7, 8, 7);
        neck.setRotationPoint(0.0F, -5.0F, -2.0F);

        chest = new ModelRenderer(this, 20, 15);
        chest.addBox(-4.0F, 0.0F, -7.0F, 8, 8, 10);
        chest.setRotationPoint(0.0F, -6.0F, -2.5F);

        abdomen = new ModelRenderer(this, 0, 40);
        abdomen.addBox(-3.0F, -8.0F, -8.0F, 6, 14, 8);
        abdomen.setRotationPoint(0.0F, 4.5F, 5.0F);

        // Queue
        tailSegmentA = new ModelRenderer(this, 52, 42);
        tailSegmentA.addBox(-1.5F, -1.0F, -2.0F, 3, 4, 3);
        tailSegmentA.setRotationPoint(0.0F, 9.5F, 6.0F);
		this.tailSegmentC = null;
		this.tailSegmentD = null;

        // Jambes
        rightUpperLeg = new ModelRenderer(this, 12, 64);
        rightUpperLeg.addBox(-2.5F, -1.5F, -3.5F, 3, 8, 5);
        rightUpperLeg.setRotationPoint(-3.0F, 9.5F, 3.0F);

        rightFoot = new ModelRenderer(this, 14, 93);
        rightFoot.addBox(-2.5F, 12.5F, -5.0F, 3, 2, 3);
        rightFoot.setRotationPoint(-3.0F, 9.5F, 3.0F);

        // Bras
        rightUpperArm = new ModelRenderer(this, 48, 77);
        rightUpperArm.addBox(-3.5F, 1.0F, -1.5F, 4, 8, 4);
        rightUpperArm.setRotationPoint(-4.0F, -4.0F, -2.0F);

        // Doigts
        for (int i = 0; i < rightFingers.length; i++) {
            rightFingers[i] = new ModelRenderer(this, 8 + i * 4, 120);
            rightFingers[i].addBox(-6.0F + i * 1.5F, 15.5F, -1.5F, 1, 3, 1);
            rightFingers[i].setRotationPoint(-4.0F, -4.0F, -2.0F);
        }

        for (int i = 0; i < leftFingers.length; i++) {
            leftFingers[i] = new ModelRenderer(this, 8 + i * 4, 124);
            leftFingers[i].addBox(5.0F - i * 1.5F, 15.5F, -1.5F, 1, 3, 1);
            leftFingers[i].setRotationPoint(4.0F, -4.0F, -2.0F);
        }
    }

    // Méthode pour appliquer la rotation
    private void setRotation(ModelRenderer model, float x, float y, float z) {
        model.rotateAngleX = x;
        model.rotateAngleY = y;
        model.rotateAngleZ = z;
    }

    // Méthode de configuration des angles de rotation en fonction de la posture
    public void setRotationAngles(float swing, float speed, float tick, float yaw, float pitch, float scale, Entity entity) {
        float radian = (float) Math.PI / 180F;
        
        head.rotateAngleY = yaw * radian;
        head.rotateAngleX = pitch * radian;

        if (!isHunched) {
            chest.rotateAngleX = 36 * radian;
            neck.rotateAngleX = -34 * radian;
            tailSegmentA.rotateAngleX = 60 * radian;
        } else {
            chest.rotateAngleX = 75 * radian;
            neck.rotateAngleX = -10 * radian;
            tailSegmentA.rotateAngleX = 100 * radian;
        }
    }

    // Méthode de rendu pour chaque partie
    public void render(Entity entity, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scale) {
        setRotationAngles(limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scale, entity);

        head.render(scale);
        nose.render(scale);
        snout.render(scale);
        upperTeeth.render(scale);
        lowerTeeth.render(scale);
        mouth.render(scale);
        leftEar.render(scale);
        rightEar.render(scale);
        neck.render(scale);
        chest.render(scale);
        abdomen.render(scale);
        tailSegmentA.render(scale);
        rightUpperLeg.render(scale);
        rightFoot.render(scale);
        rightUpperArm.render(scale);

        for (ModelRenderer finger : rightFingers) {
            finger.render(scale);
        }
        for (ModelRenderer finger : leftFingers) {
            finger.render(scale);
        }
    }
}