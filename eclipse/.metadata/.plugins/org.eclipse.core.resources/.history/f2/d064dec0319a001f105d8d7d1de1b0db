package fr.assaderie.mobs.models;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.util.MathHelper;

public class CustomZombieChargeurModel extends ModelBase {
    
    public ModelRenderer head;
    public ModelRenderer torso;
    public ModelRenderer upperTorso;
    public ModelRenderer abdomen;
    public ModelRenderer rightArm;
    public ModelRenderer leftArm;
    public ModelRenderer rightThigh;
    public ModelRenderer leftThigh;
    public ModelRenderer rightLeg;
    public ModelRenderer leftLeg;
    public ModelRenderer tail;
    public ModelRenderer rightEar;
    public ModelRenderer leftEar;

    public boolean hunched;

    public CustomZombieChargeurModel() {
        this.textureHeight = 32;
        this.textureWidth = 64;

        // Initialisation de la tÃªte et des oreilles
        this.head = new ModelRenderer(this, 0, 0);
        this.head.addBox(-1.5F, -8.5F, -4.0F, 3, 3, 4, 1.6F);
        this.head.setRotationPoint(0.0F, 1.0F, -4.0F);

        this.rightEar = new ModelRenderer(this, 0, 16);
        this.rightEar.addBox(-0.5F, -8.5F, -8.0F, 2, 4, 1, 0.0F);
        this.rightEar.setRotationPoint(1.5F, -7.0F, -2.5F);
        this.rightEar.rotateAngleX = -0.5F;
        this.rightEar.rotateAngleY = -0.3F;

        this.leftEar = new ModelRenderer(this, 15, 0);
        this.leftEar.addBox(-0.5F, -8.5F, -8.0F, 2, 4, 1, 0.0F);
        this.leftEar.setRotationPoint(-1.5F, -7.0F, -2.5F);
        this.leftEar.mirror = true;
        this.leftEar.rotateAngleX = 0.5F;
        this.leftEar.rotateAngleY = -0.3F;

        // Initialisation du torse et de l'abdomen
        this.torso = new ModelRenderer(this, 0, 7);
        this.torso.addBox(-3.0F, -8.0F, -3.5F, 6, 10, 5, 0.0F);
        this.torso.setRotationPoint(0.0F, 5.0F, 2.0F);

        this.upperTorso = new ModelRenderer(this, 20, 7);
        this.upperTorso.addBox(-2.5F, -6.0F, -3.0F, 5, 6, 5, 0.0F);
        this.upperTorso.setRotationPoint(0.0F, 4.5F, 5.0F);

        this.abdomen = new ModelRenderer(this, 0, 16);
        this.abdomen.addBox(-2.0F, -2.5F, -2.0F, 4, 4, 4, 0.0F);
        this.abdomen.setRotationPoint(0.0F, 12.0F, 0.0F);

        // Initialisation des bras
        this.rightArm = new ModelRenderer(this, 48, 0);
        this.rightArm.addBox(-3.0F, -2.0F, -2.0F, 4, 12, 4, 0.0F);
        this.rightArm.setRotationPoint(-4.0F, 4.0F, 0.0F);

        this.leftArm = new ModelRenderer(this, 48, 0);
        this.leftArm.addBox(-1.0F, -2.0F, -2.0F, 4, 12, 4, 0.0F);
        this.leftArm.setRotationPoint(4.0F, 4.0F, 0.0F);
        this.leftArm.mirror = true;

        // Initialisation des cuisses et jambes
        this.rightThigh = new ModelRenderer(this, 32, 20);
        this.rightThigh.addBox(-2.0F, 0.0F, -2.0F, 4, 8, 4, 0.0F);
        this.rightThigh.setRotationPoint(-2.5F, 12.0F, 0.5F);

        this.leftThigh = new ModelRenderer(this, 32, 20);
        this.leftThigh.addBox(-2.0F, 0.0F, -2.0F, 4, 8, 4, 0.0F);
        this.leftThigh.setRotationPoint(2.5F, 12.0F, 0.5F);
        this.leftThigh.mirror = true;

        this.rightLeg = new ModelRenderer(this, 48, 20);
        this.rightLeg.addBox(-2.0F, 0.0F, -2.0F, 4, 8, 4, 0.0F);
        this.rightLeg.setRotationPoint(-2.5F, 16.0F, 2.0F);

        this.leftLeg = new ModelRenderer(this, 48, 20);
        this.leftLeg.addBox(-2.0F, 0.0F, -2.0F, 4, 8, 4, 0.0F);
        this.leftLeg.setRotationPoint(2.5F, 16.0F, 2.0F);
        this.leftLeg.mirror = true;

        // Initialisation de la queue
        this.tail = new ModelRenderer(this, 9, 22);
        this.tail.addBox(-1.0F, 0.0F, -2.0F, 2, 2, 8, 0.0F);
        this.tail.setRotationPoint(0.0F, 10.0F, 2.0F);
    }

    @Override
    public void render(Entity entity, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scale) {
        setRotationAngles(limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scale, entity);
        head.render(scale);
        rightEar.render(scale);
        leftEar.render(scale);
        torso.render(scale);
        upperTorso.render(scale);
        abdomen.render(scale);
        rightArm.render(scale);
        leftArm.render(scale);
        rightThigh.render(scale);
        leftThigh.render(scale);
        rightLeg.render(scale);
        leftLeg.render(scale);
        tail.render(scale);
    }

    @Override
    public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scale, Entity entity) {
        head.rotateAngleY = netHeadYaw / (180F / (float) Math.PI);
        head.rotateAngleX = headPitch / (180F / (float) Math.PI);

        rightEar.rotateAngleY = head.rotateAngleY;
        leftEar.rotateAngleY = head.rotateAngleY;

        rightArm.rotateAngleX = MathHelper.cos(limbSwing * 0.6662F + (float) Math.PI) * 1.2F * limbSwingAmount;
        leftArm.rotateAngleX = MathHelper.cos(limbSwing * 0.6662F) * 1.2F * limbSwingAmount;

        rightThigh.rotateAngleX = MathHelper.cos(limbSwing * 0.6662F) * 1.4F * limbSwingAmount;
        leftThigh.rotateAngleX = MathHelper.cos(limbSwing * 0.6662F + (float) Math.PI) * 1.4F * limbSwingAmount;

        if (hunched) {
            torso.rotateAngleX = 1.5F;
            abdomen.rotateAngleX = 1.2F;
        } else {
            torso.rotateAngleX = 1.0F;
            abdomen.rotateAngleX = 0.5F;
        }
    }
}
