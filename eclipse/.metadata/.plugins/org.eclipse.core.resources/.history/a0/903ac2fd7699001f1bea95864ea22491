package fr.assaderie.mobs.events;

import java.lang.reflect.Field;

import fr.assaderie.mobs.config.AllEntityConfig;
import fr.assaderie.mobs.managers.ConfigZombieManager;
import fr.assaderie.mobs.managers.ConfigZombieManager.ZombieConfig;
import net.minecraft.entity.monster.EntityZombie;
import net.minecraft.util.DamageSource;
import net.minecraftforge.event.ForgeSubscribe;
import net.minecraftforge.event.entity.living.LivingEvent.LivingUpdateEvent;

public class ZombieConfigEventHandler {

    // Reflection field to access the protected moveSpeed field
    private static Field moveSpeedField;

    static {
        try {
            // Locate the moveSpeed field in EntityLiving
            moveSpeedField = EntityZombie.class.getSuperclass().getDeclaredField("moveSpeed");
            moveSpeedField.setAccessible(true); // Make it accessible
        } catch (NoSuchFieldException e) {
            e.printStackTrace();
        }
    }

    @ForgeSubscribe
    public void onZombieUpdate(LivingUpdateEvent event) {
        // Vérifier si l'entité est un zombie Vanilla
        if (!(event.entity instanceof EntityZombie)) {
            return;
        }

        EntityZombie zombie = (EntityZombie) event.entity;

        // Appliquer la configuration spécifique ou globale en fonction du paramètre enableZombieConfig
        if (AllEntityConfig.enableZombieConfig) {
            // Récupérer la configuration spécifique pour ce type de zombie
            ZombieConfig config = ConfigZombieManager.getZombieConfig("ZombieVanilla"); // Spécifiez le nom de configuration souhaité

            if (config != null) {
                // Appliquer la configuration spécifique
                setZombieMoveSpeed(zombie, config.speed);
                zombie.setEntityHealth(config.health);

                // Appliquer les dommages de l'attaque avec la méthode custom
                applyAttackDamage(zombie, config.damage);

                // Autres configurations spécifiques
                if (!config.sunDamageEnabled && zombie.isBurning()) {
                    zombie.extinguish();
                }
            }
        } else {
            // Appliquer la configuration globale si enableZombieConfig est désactivé
            setZombieMoveSpeed(zombie, AllEntityConfig.globalSpeed);
            zombie.setEntityHealth(AllEntityConfig.globalHealth);

            // Appliquer les dommages globaux de l'attaque avec la méthode custom
            applyAttackDamage(zombie, (int) AllEntityConfig.globalDamage);

            // Autres configurations globales
            if (!AllEntityConfig.sunDamageEnabled && zombie.isBurning()) {
                zombie.extinguish();
            }
        }
    }

    /**
     * Sets the move speed of a zombie using reflection.
     *
     * @param zombie    The zombie whose speed will be set.
     * @param moveSpeed The speed value to set.
     */
    private void setZombieMoveSpeed(EntityZombie zombie, float moveSpeed) {
        try {
            moveSpeedField.set(zombie, moveSpeed);
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }
    }

    /**
     * Applies attack damage to the zombie by overriding attackEntityAsMob.
     *
     * @param zombie The zombie entity.
     * @param damage The damage value to set.
     */
    private void applyAttackDamage(EntityZombie zombie, int damage) {
        zombie.attackEntityAsMob = (target) -> {
            target.attackEntityFrom(DamageSource.causeMobDamage(zombie), damage);
            return true;
        };
    }
}
