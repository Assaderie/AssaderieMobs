package fr.assaderie.mobs.models;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.util.MathHelper;

public class CustomZombieChargeurModel extends ModelBase {
    
	public ModelRenderer head;
    public ModelRenderer torso;
    public ModelRenderer torsoLower;
    public ModelRenderer abdomen;
    public ModelRenderer rightArm;
    public ModelRenderer leftArm;
    public ModelRenderer rightThigh;
    public ModelRenderer leftThigh;
    public ModelRenderer rightLeg;
    public ModelRenderer leftLeg;
    public ModelRenderer tail;
    public ModelRenderer rightEar;
    public ModelRenderer leftEar;

    public boolean isHunched;

    public CustomZombieChargeurModel() {
    	this.textureWidth = 64;
    	this.textureHeight = 32;
    	
        // Initialisation de la tête
        this.head = new ModelRenderer(this, 0, 0);
        this.head.addBox(-0.5F, -8.5F, -8.0F, 3, 3, 4, 1.6F);
        this.head.setRotationPoint(0.0F, 2.0F, -1.0F);

        // Oreilles droite et gauche
        this.rightEar = new ModelRenderer(this, 15, 0);
        this.rightEar.addBox(-0.5F, -8.5F, -8.0F, 2, 4, 1, 0.0F);
        this.rightEar.setRotationPoint(3.5F, -4.0F, 3.5F);
        this.rightEar.rotateAngleX = -0.7853981F;
        this.rightEar.rotateAngleY = -0.5235988F;

        this.leftEar = new ModelRenderer(this, 15, 0);
        this.leftEar.addBox(-0.5F, -8.5F, -8.0F, 2, 4, 1, 0.0F);
        this.leftEar.setRotationPoint(-2.5F, -4.5F, 3.5F);
        this.leftEar.mirror = true;
        this.leftEar.rotateAngleX = 0.7853981F;
        this.leftEar.rotateAngleY = -0.5235988F;

        // Torse et abdomen
        this.torso = new ModelRenderer(this, 0, 7);
        this.torso.addBox(-1.5F, -8.0F, -3.5F, 5, 4, 5, 2.4F);
        this.torso.setRotationPoint(0.0F, 2.0F, 0.0F);
        this.torso.rotateAngleX = 1.047198F;

        this.torsoLower = new ModelRenderer(this, 20, 7);
        this.torsoLower.addBox(-1.5F, -8.0F, -3.5F, 5, 4, 5, 2.4F);
        this.torsoLower.setRotationPoint(0.0F, 3.5F, 12.0F);
        this.torsoLower.rotateAngleX = 0.6108652F;

        this.abdomen = new ModelRenderer(this, 0, 16);
        this.abdomen.addBox(-1.0F, 2.5F, 6.0F, 4, 5, 4, 2.4F);
        this.abdomen.setRotationPoint(0.0F, 2.0F, 0.0F);
        this.abdomen.rotateAngleX = 0.4363323F;

        // Bras droit et gauche
        this.rightArm = new ModelRenderer(this, 48, 0);
        this.rightArm.addBox(-8.0F, 0.0F, 0.0F, 4, 16, 4, 0.0F);
        this.rightArm.setRotationPoint(0.0F, -6.0F, 0.0F);

        this.leftArm = new ModelRenderer(this, 48, 0);
        this.leftArm.addBox(6.0F, 0.0F, 0.0F, 4, 16, 4, 0.0F);
        this.leftArm.setRotationPoint(0.0F, -6.0F, 0.0F);
        this.leftArm.mirror = true;

        // Cuisses et jambes
        this.rightThigh = new ModelRenderer(this, 32, 20);
        this.rightThigh.addBox(0.0F, 0.0F, 0.0F, 4, 8, 4, 0.0F);
        this.rightThigh.setRotationPoint(-3.5F, 8.0F, 9.0F);
        this.rightThigh.rotateAngleX = -0.7853981F;

        this.leftThigh = new ModelRenderer(this, 32, 20);
        this.leftThigh.addBox(0.0F, 0.0F, 0.0F, 4, 8, 4, 0.0F);
        this.leftThigh.setRotationPoint(1.5F, 8.0F, 9.0F);
        this.leftThigh.mirror = true;
        this.leftThigh.rotateAngleX = -0.7853981F;

        this.rightLeg = new ModelRenderer(this, 48, 20);
        this.rightLeg.addBox(2.0F, 8.0F, 0.0F, 4, 8, 4, 0.0F);
        this.rightLeg.setRotationPoint(-5.5F, 6.0F, -3.0F);

        this.leftLeg = new ModelRenderer(this, 48, 20);
        this.leftLeg.addBox(2.0F, 8.0F, 0.0F, 4, 8, 4, 0.0F);
        this.leftLeg.setRotationPoint(-0.5F, 6.0F, -3.0F);
        this.leftLeg.mirror = true;

        // Queue
        this.tail = new ModelRenderer(this, 9, 22);
        this.tail.addBox(0.0F, -2.0F, 16.0F, 2, 2, 8, 1.0F);
        this.tail.setRotationPoint(0.0F, 2.0F, 0.0F);
    }

    // Méthode de rendu du modèle
    public void render(Entity entity, float time, float limbSwing, float ticks, float rotationYaw, float rotationPitch, float scale) {
    	super.render(entity, limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scale);
        setRotationAngles(time, limbSwing, ticks, rotationYaw, rotationPitch, scale);
        this.head.render(scale);
        this.rightEar.render(scale);
        this.leftEar.render(scale);
        this.torso.render(scale);
        this.torsoLower.render(scale);
        this.abdomen.render(scale);
        this.rightArm.render(scale);
        this.leftArm.render(scale);
        this.rightThigh.render(scale);
        this.leftThigh.render(scale);
        this.rightLeg.render(scale);
        this.leftLeg.render(scale);
        this.tail.render(scale);
    }

    // Configuration des angles de rotation
    public void setRotationAngles(float time, float limbSwing, float ticks, float rotationYaw, float rotationPitch, float scale) {
        this.head.rotateAngleY = rotationYaw / 57.29578F / 2.0F;
        this.head.rotateAngleX = rotationPitch / 57.29578F;

        // Animation bras et jambes
        this.rightArm.rotateAngleX = MathHelper.cos(time * 0.6662F + (float) Math.PI) * 2.0F * limbSwing * 0.5F;
        this.leftArm.rotateAngleX = MathHelper.cos(time * 0.6662F) * 2.0F * limbSwing * 0.5F;

        this.rightThigh.rotateAngleX = -0.7853981F + MathHelper.cos(time * 0.6662F) * 1.4F * limbSwing / 3.0F;
        this.leftThigh.rotateAngleX = -0.7853981F + MathHelper.cos(time * 0.6662F + (float) Math.PI) * 1.4F * limbSwing / 3.0F;

        this.rightLeg.rotateAngleX = MathHelper.cos(time * 0.6662F) * 1.4F * limbSwing / 2.0F;
        this.leftLeg.rotateAngleX = MathHelper.cos(time * 0.6662F + (float) Math.PI) * 1.4F * limbSwing / 2.0F;
        
        // Animation pour posture "hunched"
        if (this.isHunched) {
            // Ajustements spécifiques en mode accroupi
            this.tail.rotateAngleX = 0.261799F;
            this.tail.setRotationPoint(0, 10.0F, -2.0F);
            this.abdomen.rotateAngleX = 1.308997F;
            this.abdomen.setRotationPoint(0, 13.0F, 0);
        }
    }
}
