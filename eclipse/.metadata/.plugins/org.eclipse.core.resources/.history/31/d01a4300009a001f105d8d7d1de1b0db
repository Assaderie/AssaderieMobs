package fr.assaderie.mobs.events;

import fr.assaderie.mobs.config.AllEntityConfig;
import fr.assaderie.mobs.managers.ConfigZombieManager;
import fr.assaderie.mobs.managers.ConfigZombieManager.ZombieConfig;
import net.minecraft.entity.monster.EntityZombie;
import net.minecraftforge.event.ForgeSubscribe;
import net.minecraftforge.event.entity.EntityJoinWorldEvent;
import net.minecraftforge.event.entity.living.LivingEvent.LivingUpdateEvent;

import java.lang.reflect.Field;

public class ZombieConfigEventHandler {

    private ZombieConfig config;

    @ForgeSubscribe
    public void onEntitySpawn(EntityJoinWorldEvent event) {
        if (event.entity instanceof EntityZombie) {
            EntityZombie zombie = (EntityZombie) event.entity;

            if (!AllEntityConfig.enableZombieConfig) {
                applyGlobalConfig(zombie);
            } else {
                config = ConfigZombieManager.getZombieConfig("ZombieVanilla");
                if (config != null) {
                    applySpecificConfig(zombie, config);
                }
            }
        }
    }

    private void applyGlobalConfig(EntityZombie zombie) {
        setZombieHealth(zombie, AllEntityConfig.globalHealth);
        setZombieSpeed(zombie, AllEntityConfig.globalSpeed);
        setZombieSunDamage(zombie, AllEntityConfig.sunDamageEnabled);
    }

    private void applySpecificConfig(EntityZombie zombie, ZombieConfig config) {
        setZombieHealth(zombie, config.health);
        setZombieSpeed(zombie, config.speed);
        setZombieSunDamage(zombie, config.sunDamageEnabled);
    }

    private void setZombieSpeed(EntityZombie zombie, float speed) {
        zombie.setMoveForward(speed);
    }

    private void setZombieHealth(EntityZombie zombie, int health) {
        zombie.setEntityHealth(health);
    }

    private void setZombieSunDamage(EntityZombie zombie, boolean sunDamageEnabled) {
        try {
            // Use reflection to access and modify the isImmuneToFire field
            Field isImmuneToFireField = net.minecraft.entity.Entity.class.getDeclaredField("isImmuneToFire");
            isImmuneToFireField.setAccessible(true); // Make the field accessible
            isImmuneToFireField.setBoolean(zombie, !sunDamageEnabled); // Set the value
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Failed to set isImmuneToFire using reflection: " + e.getMessage());
        }
    }

    @ForgeSubscribe
    public void onLivingUpdate(LivingUpdateEvent event) {
        if (event.entity instanceof EntityZombie) {
            EntityZombie zombie = (EntityZombie) event.entity;

            if ((config != null && !config.sunDamageEnabled) || (!AllEntityConfig.sunDamageEnabled)) {
                // Check if the zombie is burning due to sunlight
                if (zombie.isBurning() && zombie.worldObj.isDaytime() && zombie.worldObj.canBlockSeeTheSky(
                        (int) zombie.posX, (int) zombie.posY, (int) zombie.posZ)) {
                    // Stop the zombie from burning
                    zombie.extinguish();
                }
            }
        }
    }
}
