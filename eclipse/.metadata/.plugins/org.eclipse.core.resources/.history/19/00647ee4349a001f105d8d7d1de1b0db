package fr.assaderie.mobs.models;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.util.MathHelper;

public class CustomZombieChargeurModel extends ModelBase {

    // Tête et composants du visage
    private final ModelRenderer head;
    private final ModelRenderer nose;
    private final ModelRenderer snout;
    private final ModelRenderer upperTeeth;
    private final ModelRenderer lowerTeeth;
    private final ModelRenderer mouth;
    private final ModelRenderer leftEar;
    private final ModelRenderer rightEar;

    // Cou, torse et abdomen
    private final ModelRenderer neck;
    private final ModelRenderer chest;
    private final ModelRenderer abdomen;

    // Membres et queues
    private final ModelRenderer rightLegUpper;
    private final ModelRenderer rightLegLower;
    private final ModelRenderer leftLegUpper;
    private final ModelRenderer leftLegLower;
    private final ModelRenderer rightArm;
    private final ModelRenderer leftArm;
    private final ModelRenderer tail;

    // État de posture
    public boolean isHunched;

    // Constructeur du modèle
    public CustomZombieChargeurModel() {
        this.textureWidth = 64;
        this.textureHeight = 128;

        // Initialisation des parties du corps avec des coordonnées de texture et des dimensions
        head = new ModelRenderer(this, 0, 0);
        head.addBox(-4F, -3F, -6F, 8, 8, 6);
        head.setRotationPoint(0F, -8F, -6F);

        nose = new ModelRenderer(this, 44, 33);
        nose.addBox(-1.5F, -1.7F, -12.3F, 3, 2, 7);
        nose.setRotationPoint(0F, -8F, -6F);

        upperTeeth = new ModelRenderer(this, 46, 18);
        upperTeeth.addBox(-2F, 4.01F, -12F, 4, 2, 5);
        upperTeeth.setRotationPoint(0F, -8F, -6F);

        lowerTeeth = new ModelRenderer(this, 20, 109);
        lowerTeeth.addBox(-1.5F, -12.5F, 2.01F, 3, 5, 2);
        lowerTeeth.setRotationPoint(0F, -8F, -6F);

        neck = new ModelRenderer(this, 28, 0);
        neck.addBox(-3.5F, -3F, -7F, 7, 8, 7);
        neck.setRotationPoint(0F, -5F, -2F);

        chest = new ModelRenderer(this, 20, 15);
        chest.addBox(-4F, 0F, -7F, 8, 8, 10);
        chest.setRotationPoint(0F, -6F, -2.5F);

        rightLegUpper = new ModelRenderer(this, 12, 64);
        rightLegUpper.addBox(-2.5F, -1.5F, -3.5F, 3, 8, 5);
        rightLegUpper.setRotationPoint(-3F, 9.5F, 3F);

        leftLegUpper = new ModelRenderer(this, 0, 64);
        leftLegUpper.addBox(-0.5F, -1.5F, -3.5F, 3, 8, 5);
        leftLegUpper.setRotationPoint(3F, 9.5F, 3F);

        tail = new ModelRenderer(this, 52, 42);
        tail.addBox(-1.5F, -1F, -2F, 3, 4, 3);
        tail.setRotationPoint(0F, 9.5F, 6F);
    }

    // Méthode pour appliquer la rotation
    private void setRotation(ModelRenderer model, float x, float y, float z) {
        model.rotateAngleX = x;
        model.rotateAngleY = y;
        model.rotateAngleZ = z;
    }

    // Méthode de configuration des angles de rotation en fonction de la posture
    public void setRotationAngles(float swing, float speed, float tick, float yaw, float pitch, float scale, Entity entity) {
        float radian = (float) Math.PI / 180F;
        
        head.rotateAngleY = yaw * radian;
        head.rotateAngleX = pitch * radian;

        if (!isHunched) {
            chest.rotateAngleX = 36 * radian;
            neck.rotateAngleX = -34 * radian;
            tail.rotateAngleX = 60 * radian;
        } else {
            chest.rotateAngleX = 75 * radian;
            neck.rotateAngleX = -10 * radian;
            tail.rotateAngleX = 100 * radian;
        }
    }

    // Méthode de rendu pour chaque partie
    public void render(Entity entity, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scale) {
        setRotationAngles(limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scale, entity);
        head.render(scale);
        nose.render(scale);
        upperTeeth.render(scale);
        lowerTeeth.render(scale);
        neck.render(scale);
        chest.render(scale);
        tail.render(scale);
        rightLegUpper.render(scale);
        leftLegUpper.render(scale);
    }
}
